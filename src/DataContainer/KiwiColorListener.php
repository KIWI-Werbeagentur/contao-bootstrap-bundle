<?php

namespace Kiwi\Contao\BootstrapBundle\DataContainer;

use Contao\System;
use Contao\Automator;
use Contao\DataContainer;
use Kiwi\Contao\BootstrapBundle\Models\KiwiColorModel;
use Kiwi\Contao\BootstrapBundle\Util\KiwiColorHelper;
use Symfony\Component\Filesystem\Filesystem;

class KiwiColorListener
{
    public function updateScssFile(?DataContainer $dc = null, ?int $undoId = null)
    {
        $fs = new Filesystem();
        $automator = new Automator();

        $targetPath = System::getContainer()->getParameter('kernel.project_dir') . '/files/themes/';

        if (!$fs->exists($targetPath)) {
            $fs->mkdir($targetPath);
        }

        // use undoId to distinguish ondelete_callback from onsubmit_callback
        if ($undoId) {
            // the record still exists at this point, so exclude its id
            $collColors = KiwiColorModel::findBy(['NOT id = ?'], $dc->id, ['return' => 'Collection']);
        } else {
            $collColors = KiwiColorModel::findAll(['return' => 'Collection']);
        }

        if (!$collColors) {
            $collColors = [];
        }
        $strColorScss = KiwiColorHelper::generateScssRules($collColors);

        file_put_contents($targetPath . 'colorvars.scss', "// This file is autogenerated. Do not change its contents, it will be overwritten.\n\n" . $strColorScss);

        $automator->purgeScriptCache();
    }

    public function labelCallback(array $row, string $label, DataContainer $dc, array $labels): array
    {
        $color = KiwiColorHelper::getCssColorFromValue($row['value']);

        return ['<div style="height:1em;width:1em;background-color:' . $color . '"></div>', $labels[1], '<span style="font-family:monospace">$' . $labels[2] . '</span>'];
    }

    public function valueSaveCallback(string $value, DataContainer $dc): string
    {
        if (array_key_exists($value, KiwiColorHelper::$arrHtmlColors)) {
            return KiwiColorHelper::$arrHtmlColors[$value];
        }

        if (preg_match('/^#?([A-Fa-f\d]{3,4}|[A-Fa-f\d]{6}|[A-Fa-f\d]{8})$/', $value, $arrMatches)) {
            return '#' . $arrMatches[1];
        }

        if (mb_strpos($value, 'rgb') === 0 && $value[-1] === ')') {
            if ($value[3] == 'a' && $value[4] == '(') {
                $numbers = trim(mb_substr($value, 5, mb_strlen($value) - 1 - 5));
                $arrNumbers = explode(',', $numbers);
                if (count($arrNumbers) === 4) {
                    $err = false;
                    for ($i = 0; $i < 3; $i++) {
                        $intVal = intval(trim($arrNumbers[$i]));
                        if ((string)$intVal !== trim($arrNumbers[$i])) {
                            $err = true;
                        }
                        if ($intVal < 0 || $intVal > 255) {
                            $err = true;
                        }
                    }
                    $floatVal = floatval(trim($arrNumbers[3]));
                    if ((string)$floatVal !== trim($arrNumbers[3])) {
                        $err = true;
                    }
                    if ($err) {
                        throw new \Exception('bwuargh');
                    }
                    if ($floatVal < 0 || $floatVal > 1) {
                        $err = true;
                    }
                    if (!$err) {
                        return $value;
                    }
                }
            } elseif ($value[3] == '(') {
                $numbers = trim(mb_substr($value, 4, mb_strlen($value) - 1 - 4));
                $arrNumbers = explode(',', $numbers);
                if (count($arrNumbers) === 3) {
                    $err = false;
                    for ($i = 0; $i < 3; $i++) {
                        $intVal = intval(trim($arrNumbers[$i]));
                        if ((string)$intVal !== trim($arrNumbers[$i])) {
                            $err = true;
                        }
                        if ($intVal < 0 || $intVal > 255) {
                            $err = true;
                        }
                    }
                    if (!$err) {
                        return $value;
                    }
                }
            }
        }

        throw new \Exception('Invalid color value.');
    }
}
