<?php

namespace Kiwi\Contao\BootstrapBundle\Util;

use Contao\CoreBundle\Image\Studio\Figure;

/**
 * Contains methods to generate CSS that creates background-images which adhere to Contao's responsive image settings
 *
 * Ported from Kiwi\Contao\BackgroundImageBundle\Util\ResponsiveBackgrounds@1.4.0
 */
class ResponsiveBackgroundImageHelper
{
    protected static function parseFigure(Figure $figure): array
    {
        $image = $figure->getImage();
        $arrImg = $image->getImg();
        $arrSources = $image->getSources();

        $arrResponsiveBackgrounds = [];

        // if there is just one pixel density then it's for 1x and src and srcset are identical
        if ($arrImg['srcset'] == $arrImg['src']) {
            $arrResponsiveBackgrounds[] = [
                'url'    => $arrImg['src'],
                'width'  => $arrImg['width'],
                'height' => $arrImg['height'],
            ];
        } else {
            // otherwise we have to parse the generated srcset string
            // split it into separate srcsets
            foreach (explode(", ", $arrImg['srcset']) as $strSrcset) {
                $arrResponsiveBackground = static::parseSrcsetString($strSrcset, $arrImg['width']);
                $arrResponsiveBackground['width'] = $arrImg['width'];
                $arrResponsiveBackground['height'] = $arrImg['height'];
                $arrResponsiveBackgrounds[] = $arrResponsiveBackground;
            }
        }
        if ($arrSources) {
            foreach ($arrSources as $source) {
                $arrResponsiveBackground = static::parseSrcsetString($source['srcset'], $source['width']);
                $arrResponsiveBackground['width'] = $source['width'];
                $arrResponsiveBackground['height'] = $source['height'];
                // add media query as string
                if (!empty($source['media'])) {
                    if (!empty($arrResponsiveBackground['mediaQueries'])) {
                        foreach ($arrResponsiveBackground['mediaQueries'] as &$mediaQuery) {
                            $mediaQuery .= ' and ' . $source['media'];
                            unset($mediaQuery);
                        }
                    } else {
                        $arrResponsiveBackground['mediaQueries'][] = $source['media'];
                    }
                }
                $arrResponsiveBackgrounds[] = $arrResponsiveBackground;
            }
        }

        return $arrResponsiveBackgrounds;
    }

    /**
     * @param Figure $figure generated by FigureBuilder
     * @param string $strClassName Class name that uniquely identifies the content element
     * @param array $options addHeightViaPadding (bool), noTags (bool)
     *
     * @return string
     */
    public static function generateStyleTag(Figure $figure, string $strClassName, array $options = []): string
    {
        $arrResponsiveBackgrounds = static::parseFigure($figure);

        $strStyles = '';
        $format = '.%s{background-image:url("%s")';
        if (!empty($options['addHeightViaPadding'])) {
            $format .= ';padding-top:%s%%';
        }
        $format .= '}';
        foreach ($arrResponsiveBackgrounds as $bg) {
            if (!empty($bg['mediaQueries'])) {
                $strStyles .= sprintf('@media %s {', implode(', ', $bg['mediaQueries']));
            }
            $formatParams = [$strClassName, $bg['url']];
            if (!empty($options['addHeightViaPadding'])) {
                $formatParams[] = $bg['height'] / $bg['width'] * 100;
            }
            $strStyles .= sprintf($format, ...$formatParams);
            if (!empty($bg['mediaQueries'])) {
                $strStyles .= '}';
            }
        }

        if ($strStyles && empty($options['noTags'])) {
            $strStyles = '<style>' . $strStyles . '</style>';
        }

        return $strStyles;
    }

    protected static function parseSrcsetString($strSrcset, $imgWidth): array
    {
        // split into url and pixel density
        $arrSrcset = explode(" ", $strSrcset);
        $url = $arrSrcset[0];
        if (isset($arrSrcset[1]) && strpos($arrSrcset[1], 'w')) {
            $pixelDensity = (int)$arrSrcset[1] / $imgWidth;
        } else {
            $pixelDensity = (float)($arrSrcset[1] ?? 1); // parse as float, not int, as there are densities like 1.5
        }
        $arrResponsiveBackground = [
            'url' => $url,
        ];
        // don't store the pixel density if it's for 1x as that's the default
        if ($pixelDensity !== 1.0) {
            $arrResponsiveBackground['mediaQueries'][] = '(-webkit-min-device-pixel-ratio: ' . $pixelDensity . ')';
            $arrResponsiveBackground['mediaQueries'][] = '(min-resolution: ' . $pixelDensity . ')';
        }

        return $arrResponsiveBackground;
    }
}
